<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on CodeBugs</title>
        <link>https://codebug-xu.github.io/posts/</link>
        <description>Recent content in Posts on CodeBugs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-ch</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 01 Nov 2020 10:56:52 +0000</lastBuildDate>
        <atom:link href="https://codebug-xu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>S10</title>
            <link>https://codebug-xu.github.io/2020/11/s10/</link>
            <pubDate>Sun, 01 Nov 2020 10:56:52 +0000</pubDate>
            
            <guid>https://codebug-xu.github.io/2020/11/s10/</guid>
            <description>这个充满话题的赛季终于结束了。
 IG和小凤凰的时代貌似划过去了。
 电商成了这个“小时代”里独树好几帜！
 是不是？聊一聊呗！！
相濡以沫，不如相忘于江湖 —— LGD  非常占便宜的一个俱乐部名字，老干爹！典型的中国式谐音，可爱，俏皮！有那个味！！
 “乐观家族”，反向Q，裹挟实意，年少轻狂，吞下恶魔果实。
 好久好久了，上至LPL王者，下到濒临降级，这坎坷的五年，在挺进世界赛的那一刻，每个男孩子的快乐都是“爷青回”
 整个世界赛，就是这五年的缩影，给我们的生活狠狠的煽嘴巴子！爷的青春回不来的那种带着失望的热爱。说实话，就是想流泪，不知道为谁流 ！ 我写不出更美好的词，因为我们都很热爱，所以大家可以看看关于“老干爹”的推文，我很喜欢的一段话是这样的。
 我们为什么爱LGD? 每一个粉丝和观众心中都有一个LGD最好的样子，无论是15年夏天星光熠熠的扶摇直上，还是20年重整旗鼓再次出发；每个人心中会有LGD最坏的样子，可能是S5的遗憾和惆怅，可能是在保级边缘的挣扎和不甘 。 有过低估，有过山巅，所幸我们知道，无论要经历多少人，多少年，LGD总会回来的，带着那些来来去去未尽的梦想和志愿，走到他们想去的远方！
春风得意马蹄疾，历史总有奇迹 —— TES  TES输了但是Kasa没有 &amp;amp;&amp;amp; 装杯？
 水手组合有点拉胯，Kasa是TES的打野，也是TES唯一的大爷，369最多是6吧，破茧成蝶一瞬间，秒天秒地秒神仙的贾克斯没有再次出现。AD肉身开团，左手规矩到让人害怕，不敢操作。这样的缩影太多。可以C但是没必要？尽力了但是还不狗？kasa泪洒舞台，都是遗憾！亮点十足的一个战队，毕竟创造了奇迹，状态低迷就低迷吧，失败就失败了吧，正好逆水行舟，一点小期待！S11醉笑陪公三万场，不用诉离殇！
Bin来将挡，水来土掩 —— SN  写这篇真的是为了记录我的感受，但是我想对于SN我即使不记录我现在的感受我这辈子还是忘不掉的，每个人都超出预期，所以内战的时候就展现了不属于三号种子的才艺，说实话，那都不是能力了，那真的是才艺了，对方高低架起狙击枪，地火秒双C，以父之名、点亮蛮王，那个莽进莽出的刀妹，给了我们的快乐和期待真的太多了，当然最后的结果也很遗憾，不过或许真的并不会被人所诟病，毕竟DWG出色的韩国运营简直是机器人一样，毫无破绽，毕竟不知道打不打得过所以先跑和不知道打不打得过先打再说是两种观念的碰撞，加油吧！我相信风格并不存在压制，百花齐放的LOL世界才是绚烂的。马尔扎哈说，我们从来不受岁月左右，我想说的一定是我们的对于生活的热爱而不是我们永远在变化的变化！！
 这个青春真好，我能在属于自己的召唤师S10带着脚镣跳舞，这个青春没那么好，毕竟总会结束，但是热爱，热爱生活，热爱自己，热爱我所应该哎的人，我们的青春总会“爷青回！！”
 Farewell My S10 …………</description>
            <content type="html"><![CDATA[<p>  这个充满话题的赛季终于结束了。</p>
<p>  IG和小凤凰的时代貌似划过去了。</p>
<p>  电商成了这个“小时代”里独树好几帜！</p>
<p>  是不是？聊一聊呗！！</p>
<h4 id="--lgd">相濡以沫，不如相忘于江湖 —— LGD</h4>
<p>  非常占便宜的一个俱乐部名字，老干爹！典型的中国式谐音，可爱，俏皮！有那个味！！</p>
<p>  “乐观家族”，反向Q，裹挟实意，年少轻狂，吞下恶魔果实。</p>
<p>  好久好久了，上至LPL王者，下到濒临降级，这坎坷的五年，在挺进世界赛的那一刻，每个男孩子的快乐都是“爷青回”</p>
<p>  整个世界赛，就是这五年的缩影，给我们的生活狠狠的煽嘴巴子！爷的青春回不来的那种带着失望的热爱。说实话，就是想流泪，不知道为谁流
！
  我写不出更美好的词，因为我们都很热爱，所以大家可以看看关于“老干爹”的推文，我很喜欢的一段话是这样的。</p>
<p>  我们为什么爱LGD? 每一个粉丝和观众心中都有一个LGD最好的样子，无论是15年夏天星光熠熠的扶摇直上，还是20年重整旗鼓再次出发；每个人心中会有LGD最坏的样子，可能是S5的遗憾和惆怅，可能是在保级边缘的挣扎和不甘
。
  有过低估，有过山巅，所幸我们知道，无论要经历多少人，多少年，LGD总会回来的，带着那些来来去去未尽的梦想和志愿，走到他们想去的远方！</p>
<h4 id="--tes">春风得意马蹄疾，历史总有奇迹 —— TES</h4>
<p>  TES输了但是Kasa没有  &amp;&amp;  装杯？</p>
<p>  水手组合有点拉胯，Kasa是TES的打野，也是TES唯一的大爷，369最多是6吧，破茧成蝶一瞬间，秒天秒地秒神仙的贾克斯没有再次出现。AD肉身开团，左手规矩到让人害怕，不敢操作。这样的缩影太多。可以C但是没必要？尽力了但是还不狗？kasa泪洒舞台，都是遗憾！亮点十足的一个战队，毕竟创造了奇迹，状态低迷就低迷吧，失败就失败了吧，正好逆水行舟，一点小期待！S11醉笑陪公三万场，不用诉离殇！</p>
<h4 id="bin--sn">Bin来将挡，水来土掩 —— SN</h4>
<p>  写这篇真的是为了记录我的感受，但是我想对于SN我即使不记录我现在的感受我这辈子还是忘不掉的，每个人都超出预期，所以内战的时候就展现了不属于三号种子的才艺，说实话，那都不是能力了，那真的是才艺了，对方高低架起狙击枪，地火秒双C，以父之名、点亮蛮王，那个莽进莽出的刀妹，给了我们的快乐和期待真的太多了，当然最后的结果也很遗憾，不过或许真的并不会被人所诟病，毕竟DWG出色的韩国运营简直是机器人一样，毫无破绽，毕竟不知道打不打得过所以先跑和不知道打不打得过先打再说是两种观念的碰撞，加油吧！我相信风格并不存在压制，百花齐放的LOL世界才是绚烂的。马尔扎哈说，我们从来不受岁月左右，我想说的一定是我们的对于生活的热爱而不是我们永远在变化的变化！！</p>
<p>  这个青春真好，我能在属于自己的召唤师S10带着脚镣跳舞，这个青春没那么好，毕竟总会结束，但是热爱，热爱生活，热爱自己，热爱我所应该哎的人，我们的青春总会“爷青回！！”</p>
<p>  Farewell My S10 …………</p>
]]></content>
        </item>
        
        <item>
            <title>RARandZIP</title>
            <link>https://codebug-xu.github.io/2020/10/rarandzip/</link>
            <pubDate>Thu, 08 Oct 2020 13:13:45 +0800</pubDate>
            
            <guid>https://codebug-xu.github.io/2020/10/rarandzip/</guid>
            <description>This is the brief summary of RAR and ZIP
command rar and unrar rar &amp;lt;命令&amp;gt; </description>
            <content type="html"><![CDATA[<p>This is the brief summary of RAR and ZIP</p>
<h3 id="command-rar-and-unrar">command rar and unrar</h3>
<h5 id="rar-ltgt">rar &lt;命令&gt;</h5>
]]></content>
        </item>
        
        <item>
            <title>Final season</title>
            <link>https://codebug-xu.github.io/2019/12/final-season/</link>
            <pubDate>Fri, 27 Dec 2019 17:21:19 +0800</pubDate>
            
            <guid>https://codebug-xu.github.io/2019/12/final-season/</guid>
            <description>This is my final season in volleyball league of unversity town during my master career. We lost the first game vs Peking University.
As the slogan of Cetics which is the famous team in NBA says: What hurts more the pain of hard work or the pain of regret. Alouth we lost the game. But we have tried our best expecially the have a volleyball player who is 2.02 meters high and is opposite in the Greek national youth team.</description>
            <content type="html"><![CDATA[<p>This is my final season in volleyball league of unversity town during my master career.
We lost the first game vs Peking University.</p>
<p><img src="/static/images/Peking.jpeg" alt="vsPeking"></p>
<p>As the slogan of Cetics which is the famous team in NBA says: What hurts more the pain of hard work or the pain of regret.
Alouth we lost the game. But we have tried our best expecially the have a volleyball player who is 2.02 meters high and is opposite in the Greek national youth team. Never mind，never give up.</p>
<p>Next game is our team vs Tsinghua University. we won the game and is the only game in the round-robin match. I change the jesery with good friend Bo Li who is the midblocker in his team. Best wishes to him.</p>
<p><img src="/static/images/change.jpeg" alt="vsTsinghua"></p>
<p>What should mentioned is we fighting with SUSTech volleyball team. We met with each other at the court of the SUSTech.</p>
<p><img src="/static/images/SUST.jpeg" alt="vsSUSTech"></p>
<p>Finally, Thanks for the HLH the organization created by elder brother Bingo. For the encouragement,the cheers and the burning hearts in the game!</p>
<p>Life is a bitch until you die! But Just fighting, make it wonderful.</p>
<p><img src="/static/images/HLH.jpeg" alt="HLH"></p>
]]></content>
        </item>
        
        <item>
            <title>Quantum</title>
            <link>https://codebug-xu.github.io/2019/12/quantum/</link>
            <pubDate>Mon, 02 Dec 2019 19:09:40 +0800</pubDate>
            
            <guid>https://codebug-xu.github.io/2019/12/quantum/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
        <item>
            <title>Exchange experience in Russia</title>
            <link>https://codebug-xu.github.io/2018/12/exchange-experience-in-russia/</link>
            <pubDate>Thu, 27 Dec 2018 10:58:24 +0000</pubDate>
            
            <guid>https://codebug-xu.github.io/2018/12/exchange-experience-in-russia/</guid>
            <description>Thanks for 2 doctors(Dr.Wang &amp;amp; Dr. Jiang) leading us in Russia for our exchange study.
Here is the team.
Both for fun and study!</description>
            <content type="html"><![CDATA[<p>Thanks for 2 doctors(Dr.Wang &amp; Dr. Jiang) leading us in Russia for our exchange study.</p>
<p>Here is the team.</p>
<p><img src="/static/images/team.jpeg" alt="team"></p>
<p>Both for fun and study!</p>
]]></content>
        </item>
        
        <item>
            <title>Sorts Algorithm</title>
            <link>https://codebug-xu.github.io/2018/10/sorts-algorithm/</link>
            <pubDate>Thu, 04 Oct 2018 17:07:47 +0000</pubDate>
            
            <guid>https://codebug-xu.github.io/2018/10/sorts-algorithm/</guid>
            <description>排序算法  记录本身是为了自己查找，后面你们会发现，我写的东西大多数都是为了方便自己查找，而非真正的“你在教我做事”的意思，好记性不如烂笔头，所以我记录是为了方便自己，如果哪一天方便了你们我也是会很开心的。
1.排序算法  排序算法是《数据结构与算法》中最基本的算法之一。
 排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因为排序的数据量会很大，一次不能容纳全部的排序记录，在排序过程中需要访问外部存储（对于存储的概念并没有很深刻的理解，毕竟计算机体系结构这样的书都被我用来垫显示器了，真的是非常汗颜）。常见的外部排序算法又：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等！这里基于Google和各类大神的结合我进行了简单的概括。
   排序算法 平均时间复杂度 空间复杂度 排序方式 稳定性     冒泡排序 ${O(n^2)}$ $O(1)$ 内部排序 稳定   选择排 $O(n^2)$ $O(1)$ 内部排序 不稳定   插入排序 $O(n^2)$ $O(1)$ 内部排序 稳定   希尔排序 ${O(nlog^n)}$ $O(1)$ 内部排序 不稳定   归并排序 ${O(nlog^n)}$ $O(n)$ 外部排序 稳定   快速排序 ${O(nlog^n)}$ $O(log^n)$ 内部排序 不稳定   堆排序 ${O(nlog^n)}$ $O(1)$ 内部排序 不稳定   计数排序 $O(n+k)$ $O(k)$ 外部排序 稳定   桶排序 $O(n+k)$ $O(n+k)$ 外部排序 稳定   基数排序 $O(n+k)$ $O(n+k)$ 外部排序 稳定    2.</description>
            <content type="html"><![CDATA[<h2 id="heading">排序算法</h2>
<p>  记录本身是为了自己查找，后面你们会发现，我写的东西大多数都是为了方便自己查找，而非真正的“你在教我做事”的意思，好记性不如烂笔头，所以我记录是为了方便自己，如果哪一天方便了你们我也是会很开心的。</p>
<h3 id="1">1.排序算法</h3>
<p>  排序算法是《数据结构与算法》中最基本的算法之一。</p>
<p>  排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因为排序的数据量会很大，一次不能容纳全部的排序记录，在排序过程中需要访问外部存储（对于存储的概念并没有很深刻的理解，毕竟计算机体系结构这样的书都被我用来垫显示器了，真的是非常汗颜）。常见的外部排序算法又：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等！这里基于Google和各类大神的结合我进行了简单的概括。</p>
<table>
<thead>
<tr>
<th align="center">排序算法</th>
<th align="center">平均时间复杂度</th>
<th align="center">空间复杂度</th>
<th align="center">排序方式</th>
<th align="center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">冒泡排序</td>
<td align="center"><code>${O(n^2)}$</code></td>
<td align="center"><code>$O(1)$</code></td>
<td align="center">内部排序</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">选择排</td>
<td align="center"><code>$O(n^2)$</code></td>
<td align="center"><code>$O(1)$</code></td>
<td align="center">内部排序</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">插入排序</td>
<td align="center"><code>$O(n^2)$</code></td>
<td align="center"><code>$O(1)$</code></td>
<td align="center">内部排序</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">希尔排序</td>
<td align="center"><code>${O(nlog^n)}$</code></td>
<td align="center"><code>$O(1)$</code></td>
<td align="center">内部排序</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">归并排序</td>
<td align="center"><code>${O(nlog^n)}$</code></td>
<td align="center"><code>$O(n)$</code></td>
<td align="center">外部排序</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">快速排序</td>
<td align="center"><code>${O(nlog^n)}$</code></td>
<td align="center"><code>$O(log^n)$</code></td>
<td align="center">内部排序</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">堆排序</td>
<td align="center"><code>${O(nlog^n)}$</code></td>
<td align="center"><code>$O(1)$</code></td>
<td align="center">内部排序</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">计数排序</td>
<td align="center"><code>$O(n+k)$</code></td>
<td align="center"><code>$O(k)$</code></td>
<td align="center">外部排序</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">桶排序</td>
<td align="center"><code>$O(n+k)$</code></td>
<td align="center"><code>$O(n+k)$</code></td>
<td align="center">外部排序</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">基数排序</td>
<td align="center"><code>$O(n+k)$</code></td>
<td align="center"><code>$O(n+k)$</code></td>
<td align="center">外部排序</td>
<td align="center">稳定</td>
</tr>
</tbody>
</table>
<h3 id="2">2.几种排序的代码解释</h3>
<h4 id="21">2.1冒泡排序</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> random
number <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">10</span>):
    num <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">100</span>)
    number<span style="color:#f92672">.</span>append(num)
<span style="color:#66d9ef">print</span>(number)




<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bubbleSort</span>(arr):
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,len(arr)):
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(arr)<span style="color:#f92672">-</span>i):
            <span style="color:#66d9ef">if</span> arr[j]<span style="color:#f92672">&gt;</span>arr[j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]:
                arr[j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>],arr[j]<span style="color:#f92672">=</span>arr[j],arr[j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">return</span> arr

bubbleSort(number)
<span style="color:#66d9ef">print</span>(number)
</code></pre></div><h4 id="21-1">2.1插入排序</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> random

number <span style="color:#f92672">=</span> []

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">10</span>):
    num <span style="color:#f92672">=</span>  random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">100</span>)
    number<span style="color:#f92672">.</span>append(num)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">排序前的数据</span><span style="color:#e6db74">&#34;</span>,number)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">insertionSort</span>(arr):
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(arr)):
        preIndex <span style="color:#f92672">=</span> i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
        current <span style="color:#f92672">=</span> arr[i]
        <span style="color:#66d9ef">while</span> preIndex <span style="color:#f92672">&gt;</span><span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> arr[preIndex]<span style="color:#f92672">&gt;</span>current:
            arr[preIndex<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> arr[preIndex]
            preIndex <span style="color:#f92672">-</span><span style="color:#f92672">=</span>  <span style="color:#ae81ff">1</span>
        arr[preIndex<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> current
    <span style="color:#66d9ef">return</span> arr

insertionSort(number)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">排序后的数据</span><span style="color:#e6db74">&#34;</span>,number)
</code></pre></div><h4 id="21-2">2.1归并排序</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> random 
<span style="color:#f92672">import</span> math

number <span style="color:#f92672">=</span> []
n <span style="color:#f92672">=</span> input(<span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">输入需要随机排序的个数:</span><span style="color:#e6db74">&#34;</span>)
n <span style="color:#f92672">=</span> int(n)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,n):
    num <span style="color:#f92672">=</span>  random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">100</span>)
    number<span style="color:#f92672">.</span>append(num)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">排序前的数据:</span><span style="color:#e6db74">&#34;</span>,number)
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mergeSort</span>(arr):
    <span style="color:#66d9ef">if</span>(len(arr)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">2</span>):
        <span style="color:#66d9ef">return</span> arr
    middle <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>floor(len(arr)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>)
    left,right <span style="color:#f92672">=</span> arr[<span style="color:#ae81ff">0</span>:middle],arr[middle:]
    <span style="color:#66d9ef">return</span> merge(mergeSort(left),mergeSort(right))
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">merge</span>(left, right):
    result <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">while</span> left <span style="color:#f92672">and</span> right:
        <span style="color:#66d9ef">if</span> left[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;</span><span style="color:#f92672">=</span> right[<span style="color:#ae81ff">0</span>]:
            result<span style="color:#f92672">.</span>append(left<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))<span style="color:#75715e">##.pop用于删除列表中的元素默认最后一个</span>
        <span style="color:#66d9ef">else</span>:
            result<span style="color:#f92672">.</span>append(right<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>));
    <span style="color:#66d9ef">while</span> left:
        result<span style="color:#f92672">.</span>append(left<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))
    <span style="color:#66d9ef">while</span> right:
         result<span style="color:#f92672">.</span>append(right<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))
    <span style="color:#66d9ef">return</span> result
<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74"></span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">__main__</span><span style="color:#e6db74">&#39;</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">排序后的数据: </span><span style="color:#e6db74">&#34;</span>,mergeSort(number))
</code></pre></div><h4 id="21-3">2.1选择排序</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> random 
number <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">10</span>):
    num <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">100</span>)
    number<span style="color:#f92672">.</span>append(num)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">排序前的数据:</span><span style="color:#e6db74">&#34;</span>,number)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">SelectionSort</span>(arr):
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(arr)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
        minIndex <span style="color:#f92672">=</span> i
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,len(arr)):
            <span style="color:#66d9ef">if</span> arr[j]<span style="color:#f92672">&lt;</span>arr[minIndex]:
              minIndex <span style="color:#f92672">=</span> j
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">!=</span> minIndex:
            arr[i],arr[minIndex] <span style="color:#f92672">=</span> arr[minIndex],arr[i]
    <span style="color:#66d9ef">return</span> arr

SelectionSort(number)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74"></span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">排序后的数据:</span><span style="color:#e6db74">&#34;</span>,number)
</code></pre></div><p>  其实也就是为了方便自己以后查看，很多都是参考大神们的书写。codebug是个过程，debugbug才是目的！</p>
]]></content>
        </item>
        
    </channel>
</rss>
